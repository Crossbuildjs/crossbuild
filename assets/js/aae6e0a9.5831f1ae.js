"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[275],{8384:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>h,frontMatter:()=>s,metadata:()=>a,toc:()=>d});var o=t(7458),i=t(6436);const s={title:"Options",sidebar_position:3},r=void 0,a={id:"creating-your-bot/options",title:"Options",description:"Now, let's learn how to use options in a Component.",source:"@site/docs/creating-your-bot/options.mdx",sourceDirName:"creating-your-bot",slug:"/creating-your-bot/options",permalink:"/docs/creating-your-bot/options",draft:!1,unlisted:!1,editUrl:"https://github.com/crossbuild/crossbuildjs/tree/main/apps/website/docs/docs/creating-your-bot/options.mdx",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Options",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Components",permalink:"/docs/creating-your-bot/components"},next:{title:"Modules",permalink:"/docs/misc/modules"}},c={},d=[{value:"Create the Component",id:"create-the-component",level:2},{value:"Using the Options",id:"using-the-options",level:2}];function l(e){const n={admonition:"admonition",code:"code",h2:"h2",p:"p",pre:"pre",...(0,i.a)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"Now, let's learn how to use options in a Component."}),"\n",(0,o.jsxs)(n.p,{children:["Create another file in your ",(0,o.jsx)(n.code,{children:"components"})," folder called ",(0,o.jsx)(n.code,{children:"favorite.js"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"We are going to make a basic command that allows users to list one or more of their favorite things, and then we will display that in a list."}),"\n",(0,o.jsx)(n.h2,{id:"create-the-component",children:"Create the Component"}),"\n",(0,o.jsx)(n.p,{children:"First, let's create the Component."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'import { Component } from "crossbuild"\n\nexport default class Cmpt extends Component {\n\tconstructor(client) {\n\t\tsuper("favorite", "command", client, {\n\t\t\tdescription: "What are your favorite things?"\n\t\t})\n\t}\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"Now, we need to add the options to it. Add this below the description in the constructor:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'options: [\n\t{\n\t\tname: "color",\n\t\tdescription: "What is your favorite color?",\n\t\ttype: "string",\n\t\trequired: true\n\t},\n\t{\n\t\tname: "food",\n\t\tdescription: "What is your favorite food?",\n\t\ttype: "string"\n\t},\n\t{\n\t\tname: "animal",\n\t\tdescription: "What is your favorite animal?",\n\t\ttype: "string"\n\t}\n]\n'})}),"\n",(0,o.jsx)(n.p,{children:'This will add three options to the command, "color", "food", and "animal". Since we are using the DiscordInteractionModule, these will be automatically added to the slash command in Discord.'}),"\n",(0,o.jsxs)(n.admonition,{type:"info",children:[(0,o.jsx)(n.p,{children:"Different modules will parse these differently, so check the documentation for the module you are using."}),(0,o.jsx)(n.p,{children:"The DiscordMessageModule and GuildedModule allow options to be used by writing them like this in the command:"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"!favorite --animal Mountain Lion --color Red --food Pizza\n"})})]}),"\n",(0,o.jsx)(n.h2,{id:"using-the-options",children:"Using the Options"}),"\n",(0,o.jsx)(n.p,{children:"Now, let's use the options in the command. Add your run function"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:"public override async run(interaction, options) {\n\n}\n"})}),"\n",(0,o.jsxs)(n.p,{children:['Now, instead of just sending back a "Pong" reply, let\'s get the options that we specified. Since we set the types of the options to "string", we can use the ',(0,o.jsx)(n.code,{children:"getString"})," method to get the value of the option."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'public override async run(interaction, options) {\n\tconst color = options.getString("color")\n\tconst food = options.getString("food")\n\tconst animal = options.getString("animal")\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"Now, let's send a reply with the options. To do this, we will create an empty string as our message."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'public override async run(interaction, options) {\n\tconst color = options.getString("color")\n\tconst food = options.getString("food")\n\tconst animal = options.getString("animal")\n\n\tlet message = ""\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["If you look back on the code when we set the options, you will notice that we did not set any of the options as ",(0,o.jsx)(n.code,{children:"required"}),". This means that the user can choose to not set any of the options, so we need to check if they are defined before we add them to the message."]}),"\n",(0,o.jsx)(n.p,{children:"Let's go through each option and add it to the message only if it is defined."}),"\n",(0,o.jsxs)(n.p,{children:["We can use the ",(0,o.jsx)(n.code,{children:"+="})," operator on the string to add a new string to the end of the string already defined in the variable, then we put ",(0,o.jsx)(n.code,{children:"\\n"})," on the end to add a new line."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'public override async run(interaction, options) {\n\tconst color = options.getString("color")\n\tconst food = options.getString("food")\n\tconst animal = options.getString("animal")\n\n\tlet message = ""\n\n\tif(color) message += `Your favorite color is ${color}.\\n`\n\tif(food) message += `Your favorite food is ${food}.\\n`\n\tif(animal) message += `Your favorite animal is ${animal}.\\n`\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Finally, we need to send the message back to the user. We can do this with the ",(0,o.jsx)(n.code,{children:"reply"})," method on the interaction."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'public override async run(interaction, options) {\n\tconst color = options.getString("color")\n\tconst food = options.getString("food")\n\tconst animal = options.getString("animal")\n\n\tlet message = ""\n\n\tif(color) message += `Your favorite color is ${color}.\\n`\n\tif(food) message += `Your favorite food is ${food}.\\n`\n\tif(animal) message += `Your favorite animal is ${animal}.\\n`\n\n\tawait interaction.reply(message)\n}\n'})}),"\n",(0,o.jsx)(n.p,{children:"And that's it! You can now use options in your commands."})]})}function h(e={}){const{wrapper:n}={...(0,i.a)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(l,{...e})}):l(e)}},6436:(e,n,t)=>{t.d(n,{Z:()=>a,a:()=>r});var o=t(2983);const i={},s=o.createContext(i);function r(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);