"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[35],{7522:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var o=n(9901);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},u=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,h=d["".concat(l,".").concat(m)]||d[m]||p[m]||r;return n?o.createElement(h,a(a({ref:t},u),{},{components:n})):o.createElement(h,a({ref:t},u))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:i,a[1]=s;for(var c=2;c<r;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6203:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var o=n(698),i=(n(9901),n(7522));const r={title:"Creating the Main File",sidebar_position:1},a=void 0,s={unversionedId:"creating-your-bot/the-main-file",id:"creating-your-bot/the-main-file",title:"Creating the Main File",description:"When you're running your bot, all of your code is going to start from a single file. This file is going to be the main file of your bot, and it's going to be the file that you run when you want to start your bot.",source:"@site/docs/creating-your-bot/the-main-file.mdx",sourceDirName:"creating-your-bot",slug:"/creating-your-bot/the-main-file",permalink:"/docs/creating-your-bot/the-main-file",draft:!1,editUrl:"https://github.com/crossbuild/crossbuildjs/tree/main/apps/website/docs/docs/creating-your-bot/the-main-file.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Creating the Main File",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"File Structure",permalink:"/docs/setup/file-structure"},next:{title:"Components",permalink:"/docs/creating-your-bot/components"}},l={},c=[{value:"Importing dotenv",id:"importing-dotenv",level:2},{value:"Importing CrossBuild",id:"importing-crossbuild",level:2},{value:"Creating the Client",id:"creating-the-client",level:2},{value:"Events",id:"events",level:2}],u={toc:c},d="wrapper";function p(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"When you're running your bot, all of your code is going to start from a single file. This file is going to be the main file of your bot, and it's going to be the file that you run when you want to start your bot."),(0,i.kt)("p",null,"Open the ",(0,i.kt)("inlineCode",{parentName:"p"},"index.js")," file you created and add the following code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import \'dotenv/config\'\nimport {\n    Component,\n    CrossBuild,\n    DiscordInteractionModule\n} from "crossbuild"\n\nconst client = new CrossBuild({\n    name: "Your First Bot",\n    componentPaths: ["/components"].\n    modules: [\n        new DiscordInteractionModule({\n            name: "Shadow Testing",\n            options: {\n                intents: ["Guilds", "GuildMessages", "MessageContent"]\n            },\n            token: process.env.DISCORD_TOKEN!\n        }),\n    ]\n})\n\nclient.on("ready", () => {\n    console.log("Bot is ready!")\n})\n')),(0,i.kt)("p",null,"Let's go through this step by step to see how it works."),(0,i.kt)("h2",{id:"importing-dotenv"},"Importing dotenv"),(0,i.kt)("p",null,"The first thing we need to do is import dotenv. We can do this by using the following code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import "dotenv/config"\n')),(0,i.kt)("p",null,"This imports dotenv and configures it to use the ",(0,i.kt)("inlineCode",{parentName:"p"},".env")," file in the root of your project. This file is used to store sensitive information such as your bot token."),(0,i.kt)("h2",{id:"importing-crossbuild"},"Importing CrossBuild"),(0,i.kt)("p",null,"After that, we will need to import CrossBuild. We can do this by using the following code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'import { Component, CrossBuild, DiscordInteractionModule } from "crossbuild"\n')),(0,i.kt)("p",null,"This imports the ",(0,i.kt)("inlineCode",{parentName:"p"},"Component"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"CrossBuild"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"DiscordInteractionModule")," classes from the ",(0,i.kt)("inlineCode",{parentName:"p"},"crossbuild")," package. We will be using these classes to create our bot."),(0,i.kt)("h2",{id:"creating-the-client"},"Creating the Client"),(0,i.kt)("p",null,"Next, we need to create the client. We can do this with the next bit of code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'const client = new CrossBuild({\n    name: "Your First Bot",\n    componentPaths: ["/src/components"].\n    modules: [\n        new DiscordInteractionModule({\n            name: "Shadow Testing",\n            options: {\n                intents: []\n            },\n            token: process.env.DISCORD_TOKEN!\n        }),\n    ]\n})\n')),(0,i.kt)("p",null,"This creates a new CrossBuild client. The client takes in an object with the following properties:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name")," - The name of your bot. This is used for logging."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"componentPaths")," - An array of paths to your components. We will be creating our components in the next section."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"modules")," - An array of modules to load. We will be using the ",(0,i.kt)("inlineCode",{parentName:"li"},"DiscordInteractionModule")," module to create our bot. A module at its core is a connection between your users (via Discord, Guilded, etc) and your bot in CrossBuild. See an detailed explaination of what a module is by ",(0,i.kt)("a",{parentName:"li",href:"../misc/modules"},"clicking here"),".")),(0,i.kt)("p",null,"Once you instantiate the client, it will automatically load all of the components and modules you specified."),(0,i.kt)("h2",{id:"events"},"Events"),(0,i.kt)("p",null,"Events are a way for your bot to listen for certain actions and respond to them. For example, you can listen for the ",(0,i.kt)("inlineCode",{parentName:"p"},"ready"),' event, which is emitted when CrossBuild is ready to process other events. You can also listen for events such as "message" to watch for any message sent in a channel.'),(0,i.kt)("p",null,"For our code, we will listen for the ready event. This event is emitted when the bot is ready to start processing other events. We can do this by using the following code:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'client.on("ready", () => {\n    console.log("Bot is ready!")\n})\n')))}p.isMDXComponent=!0}}]);